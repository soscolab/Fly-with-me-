{"ast":null,"code":"var _jsxFileName = \"/home/selma/Bureau/DEV/React-Sample/my-app/src/components/chatroom.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst io = require('socket.io-client');\n\nconst socket = io.connect('http://localhost:3000');\n\nfunction registerHandler(onMessageReceived) {\n  socket.on('message', onMessageReceived);\n}\n\nfunction unregisterHandler() {\n  socket.off('message');\n}\n\nsocket.on('error', function (err) {\n  console.log('received socket error:');\n  console.log(err);\n});\n\nfunction register(name, cb) {\n  socket.emit('register', name, cb);\n}\n\nfunction join(chatroomName, cb) {\n  socket.emit('join', chatroomName, cb);\n}\n\nfunction leave(chatroomName, cb) {\n  socket.emit('leave', chatroomName, cb);\n}\n\nfunction message(chatroomName, msg, cb) {\n  socket.emit('message', {\n    chatroomName,\n    message: msg\n  }, cb);\n}\n\nfunction getChatrooms(cb) {\n  socket.emit('chatrooms', null, cb);\n}\n\nfunction getAvailableUsers(cb) {\n  socket.emit('availableUsers', null, cb);\n}\n\nfunction Chat() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"message-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"message\",\n    type: \"text\",\n    placeholder: \"Message\",\n    autofocus: true,\n    autocomplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }\n  }, \"Send\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/selma/Bureau/DEV/React-Sample/my-app/src/components/chatroom.js"],"names":["React","useState","useEffect","io","require","socket","connect","registerHandler","onMessageReceived","on","unregisterHandler","off","err","console","log","register","name","cb","emit","join","chatroomName","leave","message","msg","getChatrooms","getAvailableUsers","Chat"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AAEA,MAAMC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAW,uBAAX,CAAf;;AAEA,SAASC,eAAT,CAAyBC,iBAAzB,EAA4C;AACrCH,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqBD,iBAArB;AACN;;AAED,SAASE,iBAAT,GAA6B;AACtBL,EAAAA,MAAM,CAACM,GAAP,CAAW,SAAX;AACN;;AAEDN,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAAUG,GAAV,EAAe;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACN,CAHD;;AAKA,SAASG,QAAT,CAAkBC,IAAlB,EAAwBC,EAAxB,EAA4B;AACrBZ,EAAAA,MAAM,CAACa,IAAP,CAAY,UAAZ,EAAwBF,IAAxB,EAA8BC,EAA9B;AACN;;AAED,SAASE,IAAT,CAAcC,YAAd,EAA4BH,EAA5B,EAAgC;AACzBZ,EAAAA,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoBE,YAApB,EAAkCH,EAAlC;AACN;;AAED,SAASI,KAAT,CAAeD,YAAf,EAA6BH,EAA7B,EAAiC;AAC1BZ,EAAAA,MAAM,CAACa,IAAP,CAAY,OAAZ,EAAqBE,YAArB,EAAmCH,EAAnC;AACN;;AAED,SAASK,OAAT,CAAiBF,YAAjB,EAA+BG,GAA/B,EAAoCN,EAApC,EAAwC;AACjCZ,EAAAA,MAAM,CAACa,IAAP,CAAY,SAAZ,EAAuB;AAAEE,IAAAA,YAAF;AAAgBE,IAAAA,OAAO,EAAEC;AAAzB,GAAvB,EAAuDN,EAAvD;AACN;;AAED,SAASO,YAAT,CAAsBP,EAAtB,EAA0B;AACnBZ,EAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyB,IAAzB,EAA+BD,EAA/B;AACN;;AAED,SAASQ,iBAAT,CAA2BR,EAA3B,EAA+B;AACxBZ,EAAAA,MAAM,CAACa,IAAP,CAAY,gBAAZ,EAA8B,IAA9B,EAAoCD,EAApC;AACN;;AAED,SAASS,IAAT,GAAgB;AAET,sBACO;AAAK,IAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO;AAAM,IAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,IAAI,EAAC,MAA3B;AAAkC,IAAA,WAAW,EAAC,SAA9C;AACO,IAAA,SAAS,MADhB;AACiB,IAAA,YAAY,EAAC,KAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADP,eAGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHP,CADP,CADP;AASN;;AAED,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst io = require('socket.io-client')\n\nconst socket = io.connect('http://localhost:3000')\n\nfunction registerHandler(onMessageReceived) {\n       socket.on('message', onMessageReceived)\n}\n\nfunction unregisterHandler() {\n       socket.off('message')\n}\n\nsocket.on('error', function (err) {\n       console.log('received socket error:')\n       console.log(err)\n})\n\nfunction register(name, cb) {\n       socket.emit('register', name, cb)\n}\n\nfunction join(chatroomName, cb) {\n       socket.emit('join', chatroomName, cb)\n}\n\nfunction leave(chatroomName, cb) {\n       socket.emit('leave', chatroomName, cb)\n}\n\nfunction message(chatroomName, msg, cb) {\n       socket.emit('message', { chatroomName, message: msg }, cb)\n}\n\nfunction getChatrooms(cb) {\n       socket.emit('chatrooms', null, cb)\n}\n\nfunction getAvailableUsers(cb) {\n       socket.emit('availableUsers', null, cb)\n}\n\nfunction Chat() {\n\n       return (\n              <div class=\"chat\">\n                     <form id='message-form'>\n                            <input name='message' type=\"text\" placeholder=\"Message\"\n                                   autofocus autocomplete=\"off\" />\n                            <button >Send</button>\n                     </form>\n              </div>)\n\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}