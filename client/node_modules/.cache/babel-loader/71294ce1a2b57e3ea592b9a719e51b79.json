{"ast":null,"code":"var _jsxFileName = \"/home/selma/Bureau/DEV/React-Sample/my-app/client/src/components/chatroom.js\";\nimport React, { useState, useEffect } from 'react';\nimport ProgressComponent from '@material-ui/core/CircularProgress';\n\nfunction JitsiMeetComponent() {\n  const [loading, setLoading] = useState(true);\n  const containerStyle = {\n    width: '800px',\n    height: '400px'\n  };\n  const jitsiContainerStyle = {\n    display: loading ? 'none' : 'block',\n    width: '100%',\n    height: '100%'\n  };\n\n  function startConference() {\n    try {\n      const domain = 'meet.jit.si';\n      const options = {\n        roomName: 'roomName',\n        height: 400,\n        parentNode: document.getElementById('jitsi-container'),\n        interfaceConfigOverwrite: {\n          filmStripOnly: false,\n          SHOW_JITSI_WATERMARK: false\n        },\n        configOverwrite: {\n          disableSimulcast: false\n        }\n      };\n      const api = new JitsiMeetExternalAPI(domain, options);\n      api.addEventListener('videoConferenceJoined', () => {\n        console.log('Local User Joined');\n        setLoading(false);\n        api.executeCommand('displayName', 'MyName');\n      });\n    } catch (error) {\n      console.error('Failed to load Jitsi API', error);\n    }\n  }\n\n  useEffect(() => {\n    // verify the JitsiMeetExternalAPI constructor is added to the global..\n    if (window.JitsiMeetExternalAPI) startConference();else alert('Jitsi Meet API script not loaded');\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: containerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, loading && /*#__PURE__*/React.createElement(ProgressComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 34\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"jitsi-container\",\n    style: jitsiContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }\n  }));\n}\n\nexport default JitsiMeetComponent;\n/* global gapi */\n\n/*\nfunction Chat() {\n\n\n\n       function checklogin() {\n              //   fetch('http://localhost:5000/testlog')\n              window.test();\n       }\n       return (\n              <div className=\"card text-center m-3\">\n                     <h5 className=\"card-header\">\n                            Simple POST Request</h5>\n                     <div className=\"card-body\">\n                            HOLA\n                            <button onClick={checklogin}> Create Room\n                                   </button>\n                     </div>\n              </div>\n       )\n\n}\nexport default Chat;\n\n\n\n\n*/\n//HOW TO SET A POST REQUEST TO AN EXTERNAL API\n// STORE USER IN DATABASE\n\n/*const [PostId, setPostId] = useState(null);\n\nuseEffect(() => {\n\n       // POST request using fetch inside useEffect React hook\n       const requestOptions = {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                     id: \"4\",\n                     name: \"t\",\n                     email: \"SS\",\n                     password: \"IDd52\",\n                     date: \"23052041\"\n              })\n       };\n       fetch('http://localhost:5000/test', requestOptions)\n              .then(response => response.json())\n              .then(message => setPostId(message));\n       // empty dependency array means this effect will only run once (like componentDidMount in classes)\n}, []);\n\n  return (\n              <div className=\"card text-center m-3\">\n                     <h5 className=\"card-header\">Simple POST Request</h5>\n                     <div className=\"card-body\">\n                            {JSON.stringify(PostId)}\n                     </div>\n              </div>\n       )\n*/\n\n/*import React, { Component } from 'react';\n\nclass Chat extends Component {\n       state = {\n              data: null\n       };\n\n       componentDidMount() {\n              // Call our fetch function below once the component mounts\n              this.callBackendAPI()\n                     .then(res => this.setState({ data: res.express }))\n                     .catch(err => console.log(err));\n       }SyntaxErrorss_backend');\n              const body = await response.json();\n\n              if (response.status !== 200) {\n                     throw Error(body.message)\n              }\n              return body;\n       };\n\n       render() {\n              return (\n                     <div className=\"App\">\n                            <header className=\"App-header\">\n                                   <h1 className=\"App-title\">Welcome to React</h1>\n                            </header>\n                            <p className=\"App-intro\">{this.state.data}</p>\n                     </div>\n              );\n       }\n}\n\nexport default Chat;\n\n\n\n\n\n\n\n\n\n/* HOW TO FETCH DATA FROM EXTERNAL API EXAMPLE*/\n\n/*import React, { useState, useEffect } from 'react';\nimport { decode } from 'he';\n\n\nfunction Chat() {\n       const [joke, setJoke] = useState('');\n\n       const fetchJoke = async signal => {\n              const url = new URL('https://api.icndb.com/jokes/random');\n              const response = await fetch(url, { signal });\n              const { value } = await response.json();\n\n              setJoke(decode(value.joke));\n       };\n\n       useEffect(() => {\n              if (!joke) {\n                     const controller = new AbortController();\n                     fetchJoke(controller.signal);\n\n                     return () => controller.abort();\n              }\n       }, [joke]);\n\n       return (\n              <div className=\"App\">\n                     <header className=\"App-header\">\n                            <p>{joke || '...'}</p>\n                            <button className=\"App-link\" onClick={() => setJoke('')}>\n                                   Get a new joke\n        </button>\n                     </header>\n\n              </div>\n\n       );\n\n}\n*/\n//export default Chat","map":{"version":3,"sources":["/home/selma/Bureau/DEV/React-Sample/my-app/client/src/components/chatroom.js"],"names":["React","useState","useEffect","ProgressComponent","JitsiMeetComponent","loading","setLoading","containerStyle","width","height","jitsiContainerStyle","display","startConference","domain","options","roomName","parentNode","document","getElementById","interfaceConfigOverwrite","filmStripOnly","SHOW_JITSI_WATERMARK","configOverwrite","disableSimulcast","api","JitsiMeetExternalAPI","addEventListener","console","log","executeCommand","error","window","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;;AAEA,SAASC,kBAAT,GAA8B;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMM,cAAc,GAAG;AAChBC,IAAAA,KAAK,EAAE,OADS;AAEhBC,IAAAA,MAAM,EAAE;AAFQ,GAAvB;AAKA,QAAMC,mBAAmB,GAAG;AACrBC,IAAAA,OAAO,EAAGN,OAAO,GAAG,MAAH,GAAY,OADR;AAErBG,IAAAA,KAAK,EAAE,MAFc;AAGrBC,IAAAA,MAAM,EAAE;AAHa,GAA5B;;AAMA,WAASG,eAAT,GAA2B;AACpB,QAAI;AACG,YAAMC,MAAM,GAAG,aAAf;AACA,YAAMC,OAAO,GAAG;AACTC,QAAAA,QAAQ,EAAE,UADD;AAETN,QAAAA,MAAM,EAAE,GAFC;AAGTO,QAAAA,UAAU,EAAEC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAHH;AAITC,QAAAA,wBAAwB,EAAE;AACnBC,UAAAA,aAAa,EAAE,KADI;AAEnBC,UAAAA,oBAAoB,EAAE;AAFH,SAJjB;AAQTC,QAAAA,eAAe,EAAE;AACVC,UAAAA,gBAAgB,EAAE;AADR;AARR,OAAhB;AAaA,YAAMC,GAAG,GAAG,IAAIC,oBAAJ,CAAyBZ,MAAzB,EAAiCC,OAAjC,CAAZ;AACAU,MAAAA,GAAG,CAACE,gBAAJ,CAAqB,uBAArB,EAA8C,MAAM;AAC7CC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAtB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAkB,QAAAA,GAAG,CAACK,cAAJ,CAAmB,aAAnB,EAAkC,QAAlC;AACN,OAJD;AAKN,KArBD,CAqBE,OAAOC,KAAP,EAAc;AACTH,MAAAA,OAAO,CAACG,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACN;AACP;;AAED5B,EAAAA,SAAS,CAAC,MAAM;AACT;AACA,QAAI6B,MAAM,CAACN,oBAAX,EAAiCb,eAAe,GAAhD,KACKoB,KAAK,CAAC,kCAAD,CAAL;AACX,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACO;AACO,IAAA,KAAK,EAAEzB,cADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGQF,OAAO,iBAAI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHnB,eAIO;AACO,IAAA,EAAE,EAAC,iBADV;AAEO,IAAA,KAAK,EAAEK,mBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJP,CADP;AAWN;;AAED,eAAeN,kBAAf;AAyDA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ProgressComponent from '@material-ui/core/CircularProgress';\n\nfunction JitsiMeetComponent() {\n       const [loading, setLoading] = useState(true);\n       const containerStyle = {\n              width: '800px',\n              height: '400px',\n       };\n\n       const jitsiContainerStyle = {\n              display: (loading ? 'none' : 'block'),\n              width: '100%',\n              height: '100%',\n       }\n\n       function startConference() {\n              try {\n                     const domain = 'meet.jit.si';\n                     const options = {\n                            roomName: 'roomName',\n                            height: 400,\n                            parentNode: document.getElementById('jitsi-container'),\n                            interfaceConfigOverwrite: {\n                                   filmStripOnly: false,\n                                   SHOW_JITSI_WATERMARK: false,\n                            },\n                            configOverwrite: {\n                                   disableSimulcast: false,\n                            },\n                     };\n\n                     const api = new JitsiMeetExternalAPI(domain, options);\n                     api.addEventListener('videoConferenceJoined', () => {\n                            console.log('Local User Joined');\n                            setLoading(false);\n                            api.executeCommand('displayName', 'MyName');\n                     });\n              } catch (error) {\n                     console.error('Failed to load Jitsi API', error);\n              }\n       }\n\n       useEffect(() => {\n              // verify the JitsiMeetExternalAPI constructor is added to the global..\n              if (window.JitsiMeetExternalAPI) startConference();\n              else alert('Jitsi Meet API script not loaded');\n       }, []);\n\n       return (\n              <div\n                     style={containerStyle}\n              >\n                     {loading && <ProgressComponent />}\n                     <div\n                            id=\"jitsi-container\"\n                            style={jitsiContainerStyle}\n                     />\n              </div>\n       );\n}\n\nexport default JitsiMeetComponent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* global gapi */\n/*\nfunction Chat() {\n\n\n\n       function checklogin() {\n              //   fetch('http://localhost:5000/testlog')\n              window.test();\n       }\n       return (\n              <div className=\"card text-center m-3\">\n                     <h5 className=\"card-header\">\n                            Simple POST Request</h5>\n                     <div className=\"card-body\">\n                            HOLA\n                            <button onClick={checklogin}> Create Room\n                                   </button>\n                     </div>\n              </div>\n       )\n\n}\nexport default Chat;\n\n\n\n\n*/\n\n\n\n\n\n\n\n\n//HOW TO SET A POST REQUEST TO AN EXTERNAL API\n\n// STORE USER IN DATABASE\n\n/*const [PostId, setPostId] = useState(null);\n\nuseEffect(() => {\n\n       // POST request using fetch inside useEffect React hook\n       const requestOptions = {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                     id: \"4\",\n                     name: \"t\",\n                     email: \"SS\",\n                     password: \"IDd52\",\n                     date: \"23052041\"\n              })\n       };\n       fetch('http://localhost:5000/test', requestOptions)\n              .then(response => response.json())\n              .then(message => setPostId(message));\n       // empty dependency array means this effect will only run once (like componentDidMount in classes)\n}, []);\n\n  return (\n              <div className=\"card text-center m-3\">\n                     <h5 className=\"card-header\">Simple POST Request</h5>\n                     <div className=\"card-body\">\n                            {JSON.stringify(PostId)}\n                     </div>\n              </div>\n       )\n*/\n\n\n\n\n\n\n\n/*import React, { Component } from 'react';\n\nclass Chat extends Component {\n       state = {\n              data: null\n       };\n\n       componentDidMount() {\n              // Call our fetch function below once the component mounts\n              this.callBackendAPI()\n                     .then(res => this.setState({ data: res.express }))\n                     .catch(err => console.log(err));\n       }SyntaxErrorss_backend');\n              const body = await response.json();\n\n              if (response.status !== 200) {\n                     throw Error(body.message)\n              }\n              return body;\n       };\n\n       render() {\n              return (\n                     <div className=\"App\">\n                            <header className=\"App-header\">\n                                   <h1 className=\"App-title\">Welcome to React</h1>\n                            </header>\n                            <p className=\"App-intro\">{this.state.data}</p>\n                     </div>\n              );\n       }\n}\n\nexport default Chat;\n\n\n\n\n\n\n\n\n\n/* HOW TO FETCH DATA FROM EXTERNAL API EXAMPLE*/\n\n/*import React, { useState, useEffect } from 'react';\nimport { decode } from 'he';\n\n\nfunction Chat() {\n       const [joke, setJoke] = useState('');\n\n       const fetchJoke = async signal => {\n              const url = new URL('https://api.icndb.com/jokes/random');\n              const response = await fetch(url, { signal });\n              const { value } = await response.json();\n\n              setJoke(decode(value.joke));\n       };\n\n       useEffect(() => {\n              if (!joke) {\n                     const controller = new AbortController();\n                     fetchJoke(controller.signal);\n\n                     return () => controller.abort();\n              }\n       }, [joke]);\n\n       return (\n              <div className=\"App\">\n                     <header className=\"App-header\">\n                            <p>{joke || '...'}</p>\n                            <button className=\"App-link\" onClick={() => setJoke('')}>\n                                   Get a new joke\n        </button>\n                     </header>\n\n              </div>\n\n       );\n\n}\n*/\n//export default Chat\n"]},"metadata":{},"sourceType":"module"}