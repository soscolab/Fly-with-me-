{"ast":null,"code":"var _jsxFileName = \"/home/selma/Bureau/DEV/React-Sample/my-app/src/components/chatroom.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst io = require('socket.io-client');\n\nconst socket = io('http://localhost:3000');\n\nfunction Chat() {\n  const [messageCount, setMessageCount] = useState(0);\n  const [theme, setTheme] = useState('dark');\n  const [inRoom, setInRoom] = useState(false);\n  useEffect(() => {\n    if (inRoom) {\n      console.log('joining room');\n      socket.emit('room', {\n        room: 'test-room'\n      });\n    }\n\n    return () => {\n      if (inRoom) {\n        console.log('leaving room');\n        socket.emit('leave room', {\n          room: 'test-room'\n        });\n      }\n    };\n  });\n  useEffect(() => {\n    socket.on('receive message', payload => {\n      setMessageCount(messageCount + 1);\n      document.title = `${messageCount} new messages have been emitted`;\n    });\n  }, []); //only re-run the effect if new message comes in\n\n  const handleSetTheme = () => {\n    let newTheme;\n    theme === 'light' ? newTheme = 'dark' : newTheme = 'light';\n    console.log('new theme: ' + newTheme);\n    setTheme(newTheme);\n  };\n\n  const handleInRoom = () => {\n    inRoom ? setInRoom(false) : setInRoom(true);\n  };\n\n  const handleNewMessage = () => {\n    console.log('emitting new message');\n    socket.emit('new message', {\n      room: 'test-room'\n    });\n    setMessageCount(messageCount + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `App Theme-${theme}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }, inRoom && `You Have Entered The Room`, !inRoom && `Outside Room`), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, messageCount, \" messages have been emitted\"), inRoom && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleNewMessage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 36\n    }\n  }, \"Emit new message\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleSetTheme(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, \"Toggle Theme\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleInRoom(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }, inRoom && `Leave Room`, !inRoom && `Enter Room`)));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/selma/Bureau/DEV/React-Sample/my-app/src/components/chatroom.js"],"names":["React","useState","useEffect","io","require","socket","Chat","messageCount","setMessageCount","theme","setTheme","inRoom","setInRoom","console","log","emit","room","on","payload","document","title","handleSetTheme","newTheme","handleInRoom","handleNewMessage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst io = require('socket.io-client');\nconst socket = io('http://localhost:3000');\n\nfunction Chat() {\n\n       const [messageCount, setMessageCount] = useState(0);\n       const [theme, setTheme] = useState('dark');\n       const [inRoom, setInRoom] = useState(false);\n\n       useEffect(() => {\n\n              if (inRoom) {\n                     console.log('joining room');\n                     socket.emit('room', { room: 'test-room' });\n              }\n\n              return () => {\n                     if (inRoom) {\n                            console.log('leaving room');\n                            socket.emit('leave room', {\n                                   room: 'test-room'\n                            })\n                     }\n              }\n       });\n\n       useEffect(() => {\n              socket.on('receive message', payload => {\n                     setMessageCount(messageCount + 1);\n                     document.title = `${messageCount} new messages have been emitted`;\n              });\n       }, []); //only re-run the effect if new message comes in\n\n       const handleSetTheme = () => {\n              let newTheme;\n              (theme === 'light')\n                     ? newTheme = 'dark'\n                     : newTheme = 'light';\n              console.log('new theme: ' + newTheme);\n              setTheme(newTheme);\n       }\n\n       const handleInRoom = () => {\n              inRoom\n                     ? setInRoom(false)\n                     : setInRoom(true);\n       }\n\n       const handleNewMessage = () => {\n              console.log('emitting new message');\n              socket.emit('new message', {\n                     room: 'test-room'\n              });\n              setMessageCount(messageCount + 1);\n       }\n\n       return (\n              <div className={`App Theme-${theme}`}>\n                     <header className=\"App-header\">\n                            <img className=\"App-logo\" alt=\"logo\" />\n\n                            <h1>\n                                   {inRoom && `You Have Entered The Room`}\n                                   {!inRoom && `Outside Room`}\n                            </h1>\n\n                            <p>{messageCount} messages have been emitted</p>\n\n                            {inRoom &&\n                                   <button onClick={() => handleNewMessage()}>\n                                          Emit new message\n        </button>\n                            }\n\n                            <button onClick={() => handleSetTheme()}>\n                                   Toggle Theme\n        </button>\n\n                            <button onClick={() => handleInRoom()}>\n                                   {inRoom && `Leave Room`}\n                                   {!inRoom && `Enter Room`}\n                            </button>\n\n                     </header>\n              </div>\n       );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}