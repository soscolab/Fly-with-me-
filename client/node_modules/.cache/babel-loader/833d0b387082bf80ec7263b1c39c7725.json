{"ast":null,"code":"var _jsxFileName = \"/home/selma/Bureau/DEV/React-Sample/my-app/client/src/components/chatroom.js\";\nimport React, { Component } from 'react';\nimport FacebookLogin from 'react-facebook-login';\nimport { GoogleLogin } from 'react-google-login';\n\nclass Chat extends Component {\n  constructor() {\n    super();\n\n    this.logout = () => {\n      this.setState({\n        isAuthenticated: false,\n        token: '',\n        user: null\n      });\n    };\n\n    this.facebookResponse = e => {};\n\n    this.googleResponse = e => {};\n\n    this.onFailure = error => {\n      alert(error);\n    };\n\n    this.state = {\n      isAuthenticated: false,\n      user: null,\n      token: ''\n    };\n  }\n\n  render() {\n    let content = !!this.state.isAuthenticated ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 36\n      }\n    }, \"Authenticated\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 36\n      }\n    }, this.state.user.email), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 36\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logout,\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 43\n      }\n    }, \"Log out\"))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FacebookLogin, {\n      appId: \"XXXXXXXXXX\",\n      autoLoad: false,\n      fields: \"name,email,picture\",\n      callback: this.facebookResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: \"XXXXXXXXXX\",\n      buttonText: \"Login\",\n      onSuccess: this.googleResponse,\n      onFailure: this.googleResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }\n    }, content);\n  }\n\n}\n\nexport default Chat;\n/* HOW TO FETCH DATA FROM EXTERNAL API EXAMPLE\n\nimport React, { useState, useEffect } from 'react';\nimport { decode } from 'he';\n\n\nfunction Chat() {\n       const [joke, setJoke] = useState('');\n\n       const fetchJoke = async signal => {\n              const url = new URL('https://api.icndb.com/jokes/random');\n              const response = await fetch(url, { signal });\n              const { value } = await response.json();\n\n              setJoke(decode(value.joke));\n       };\n\n       useEffect(() => {\n              if (!joke) {\n                     const controller = new AbortController();\n                     fetchJoke(controller.signal);\n\n                     return () => controller.abort();\n              }\n       }, [joke]);\n\n       return (\n              <div className=\"App\">\n                     <header className=\"App-header\">\n                            <p>{joke || '...'}</p>\n                            <button className=\"App-link\" onClick={() => setJoke('')}>\n                                   Get a new joke\n        </button>\n                     </header>\n\n       </div>\n\n       );\n\n}\n\n*/","map":{"version":3,"sources":["/home/selma/Bureau/DEV/React-Sample/my-app/client/src/components/chatroom.js"],"names":["React","Component","FacebookLogin","GoogleLogin","Chat","constructor","logout","setState","isAuthenticated","token","user","facebookResponse","e","googleResponse","onFailure","error","alert","state","render","content","email"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAEtBI,EAAAA,WAAW,GAAG;AACP;;AADO,SAKdC,MALc,GAKL,MAAM;AACR,WAAKC,QAAL,CAAc;AAAEC,QAAAA,eAAe,EAAE,KAAnB;AAA0BC,QAAAA,KAAK,EAAE,EAAjC;AAAqCC,QAAAA,IAAI,EAAE;AAA3C,OAAd;AACN,KAPa;;AAAA,SAUdC,gBAVc,GAUMC,CAAD,IAAO,CAAG,CAVf;;AAAA,SAYdC,cAZc,GAYID,CAAD,IAAO,CAAG,CAZb;;AAAA,SAadE,SAbc,GAaDC,KAAD,IAAW;AAChBC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACN,KAfa;;AAEP,SAAKE,KAAL,GAAa;AAAET,MAAAA,eAAe,EAAE,KAAnB;AAA0BE,MAAAA,IAAI,EAAE,IAAhC;AAAsCD,MAAAA,KAAK,EAAE;AAA7C,KAAb;AACN;;AAaDS,EAAAA,MAAM,GAAG;AACF,QAAIC,OAAO,GAAG,CAAC,CAAC,KAAKF,KAAL,CAAWT,eAAb,gBAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADP,eAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ,KAAKS,KAAL,CAAWP,IAAX,CAAgBU,KADxB,CAFP,eAKO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO;AAAQ,MAAA,OAAO,EAAE,KAAKd,MAAtB;AAA8B,MAAA,SAAS,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADP,CALP,CAFA,gBAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,oBAAC,aAAD;AACO,MAAA,KAAK,EAAC,YADb;AAEO,MAAA,QAAQ,EAAE,KAFjB;AAGO,MAAA,MAAM,EAAC,oBAHd;AAIO,MAAA,QAAQ,EAAE,KAAKK,gBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADP,eAMO,oBAAC,WAAD;AACO,MAAA,QAAQ,EAAC,YADhB;AAEO,MAAA,UAAU,EAAC,OAFlB;AAGO,MAAA,SAAS,EAAE,KAAKE,cAHvB;AAIO,MAAA,SAAS,EAAE,KAAKA,cAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANP,CAfd;AA8BA,wBACO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQM,OADR,CADP;AAKN;;AAtDqB;;AAyD7B,eAAef,IAAf;AAiCA","sourcesContent":["import React, { Component } from 'react';\nimport FacebookLogin from 'react-facebook-login';\nimport { GoogleLogin } from 'react-google-login';\n\nclass Chat extends Component {\n\n       constructor() {\n              super();\n              this.state = { isAuthenticated: false, user: null, token: '' };\n       }\n\n       logout = () => {\n              this.setState({ isAuthenticated: false, token: '', user: null })\n       };\n\n\n       facebookResponse = (e) => { };\n\n       googleResponse = (e) => { };\n       onFailure = (error) => {\n              alert(error);\n       }\n       render() {\n              let content = !!this.state.isAuthenticated ?\n                     (\n                            <div>\n                                   <p>Authenticated</p>\n                                   <div>\n                                          {this.state.user.email}\n                                   </div>\n                                   <div>\n                                          <button onClick={this.logout} className=\"button\">\n                                                 Log out\n                        </button>\n                                   </div>\n                            </div>\n                     ) :\n                     (\n                            <div>\n                                   <FacebookLogin\n                                          appId=\"XXXXXXXXXX\"\n                                          autoLoad={false}\n                                          fields=\"name,email,picture\"\n                                          callback={this.facebookResponse} />\n                                   <GoogleLogin\n                                          clientId=\"XXXXXXXXXX\"\n                                          buttonText=\"Login\"\n                                          onSuccess={this.googleResponse}\n                                          onFailure={this.googleResponse}\n                                   />\n                            </div>\n                     );\n\n              return (\n                     <div className=\"App\">\n                            {content}\n                     </div>\n              );\n       }\n}\n\nexport default Chat;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* HOW TO FETCH DATA FROM EXTERNAL API EXAMPLE\n\nimport React, { useState, useEffect } from 'react';\nimport { decode } from 'he';\n\n\nfunction Chat() {\n       const [joke, setJoke] = useState('');\n\n       const fetchJoke = async signal => {\n              const url = new URL('https://api.icndb.com/jokes/random');\n              const response = await fetch(url, { signal });\n              const { value } = await response.json();\n\n              setJoke(decode(value.joke));\n       };\n\n       useEffect(() => {\n              if (!joke) {\n                     const controller = new AbortController();\n                     fetchJoke(controller.signal);\n\n                     return () => controller.abort();\n              }\n       }, [joke]);\n\n       return (\n              <div className=\"App\">\n                     <header className=\"App-header\">\n                            <p>{joke || '...'}</p>\n                            <button className=\"App-link\" onClick={() => setJoke('')}>\n                                   Get a new joke\n        </button>\n                     </header>\n\n       </div>\n\n       );\n\n}\n\n*/\n\n"]},"metadata":{},"sourceType":"module"}