{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport warning from 'warning';\nimport { getThemeProps, useTheme } from '@material-ui/styles'; // This variable will be true once the server-side hydration is completed.\n\nvar hydrationCompleted = false;\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n  process.env.NODE_ENV !== \"production\" ? warning(typeof queryInput !== 'function' || theme !== null, ['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n')) : void 0;\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, {}, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if ((hydrationCompleted || noSsr) && supportMatchMedia) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  React.useEffect(function () {\n    hydrationCompleted = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = window.matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      setMatch(queryList.matches);\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, supportMatchMedia]);\n  return match;\n}\n\nexport function testReset() {\n  hydrationCompleted = false;\n}\nexport default useMediaQuery;","map":{"version":3,"sources":["/home/selma/Bureau/DEV/React-Sample/my-app/node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js"],"names":["_slicedToArray","_extends","React","warning","getThemeProps","useTheme","hydrationCompleted","useMediaQuery","queryInput","options","arguments","length","undefined","theme","props","name","process","env","NODE_ENV","join","query","replace","supportMatchMedia","window","matchMedia","_props$options","_props$options$defaul","defaultMatches","_props$options$noSsr","noSsr","_props$options$ssrMat","ssrMatchMedia","_React$useState","useState","matches","_React$useState2","match","setMatch","useEffect","queryList","updateMatch","addListener","removeListener","testReset"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport warning from 'warning';\nimport { getThemeProps, useTheme } from '@material-ui/styles'; // This variable will be true once the server-side hydration is completed.\n\nvar hydrationCompleted = false;\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n  process.env.NODE_ENV !== \"production\" ? warning(typeof queryInput !== 'function' || theme !== null, ['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n')) : void 0;\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, {}, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if ((hydrationCompleted || noSsr) && supportMatchMedia) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  React.useEffect(function () {\n    hydrationCompleted = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = window.matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      setMatch(queryList.matches);\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, supportMatchMedia]);\n  return match;\n}\n\nexport function testReset() {\n  hydrationCompleted = false;\n}\nexport default useMediaQuery;"]},"metadata":{},"sourceType":"module"}